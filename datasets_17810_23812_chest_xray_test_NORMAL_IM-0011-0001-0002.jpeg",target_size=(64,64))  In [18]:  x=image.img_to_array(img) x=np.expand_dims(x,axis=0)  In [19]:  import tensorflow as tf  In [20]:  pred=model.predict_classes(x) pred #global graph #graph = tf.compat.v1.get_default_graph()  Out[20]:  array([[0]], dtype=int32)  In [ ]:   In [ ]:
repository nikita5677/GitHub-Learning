Import the Imagedata generator
In [1]:

from keras.preprocessing.image import ImageDataGenerator

Using TensorFlow backend.

In [2]:

train_data=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)

In [3]:

test_data=ImageDataGenerator(rescale=1./255)

In [4]:

x_train=train_data.flow_from_directory(r"./train",target_size=(64,64),batch_size=32,class_mode='binary')

Found 202 images belonging to 2 classes.

In [5]:

x_test=test_data.flow_from_directory(r"./test",target_size=(64,64),batch_size=32,class_mode='binary')
x_test

Found 60 images belonging to 2 classes.

Out[5]:

<keras.preprocessing.image.DirectoryIterator at 0x7fc8f629c350>

import the libraries
In [6]:

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten

In [7]:

model=Sequential()

In [8]:

model.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))

In [9]:

model.add(MaxPooling2D(pool_size=(2,2)))

In [10]:

model.add(Flatten())

In [11]:

model.add(Dense(units=128,init='uniform',activation='relu'))

/home/billu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(units=128, activation="relu", kernel_initializer="uniform")`
  """Entry point for launching an IPython kernel.

In [12]:

model.add(Dense(units=1,activation='sigmoid',init='uniform'))

/home/billu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(units=1, activation="sigmoid", kernel_initializer="uniform")`
  """Entry point for launching an IPython kernel.

In [13]:

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

In [21]:

model.fit_generator(x_train,steps_per_epoch=7,epochs=50,validation_data=x_test,validation_steps=2)

In [16]:

model.save("cnn.h5")

In [14]:

from keras.models import load_model
from keras.preprocessing import image

In [15]:

model=load_model("cnn.h5")

In [16]:

import numpy as np

In [17]:

img=image.load_img(r"./test/normal/datasets_17810_23812_chest_xray_test_NORMAL_IM-0011-0001-0002.jpeg",target_size=(64,64))

In [18]:

x=image.img_to_array(img)
x=np.expand_dims(x,axis=0)

In [19]:

import tensorflow as tf

In [20]:

pred=model.predict_classes(x)
pred
#global graph
#graph = tf.compat.v1.get_default_graph()

Out[20]:

array([[0]], dtype=int32)

In [ ]:


In [ ]:


